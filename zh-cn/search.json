[{"categories":["Documentation"],"content":"学习在几分钟内创建一个 Hugo FixIt 站点。","date":"2023-02-20","objectID":"/zh-cn/documentation/getting-started/quick-start/","tags":["Installation","Basics"],"title":"快速上手","uri":"/zh-cn/documentation/getting-started/quick-start/"},{"categories":["Documentation"],"content":"学习在几分钟内创建一个 Hugo FixIt 站点。 在本教程中，你将学会： 创建站点 添加内容 配置站点 发布站点 15 先决条件 技巧 如果这是你第一次使用 Hugo，我们强烈建议你通过阅读这篇 入门文档 来更多地了解它。 在开始本教程之前，你必须： 安装 Hugo（扩展版，v0.146.0 或更高版本） 安装 Git 你还必须熟悉使用命令行。 16 创建网站 提示 接下来的步骤将一步步指导你创建一个 Hugo 网站。 如果你已经熟悉 Hugo，可以跳过这些步骤，使用 FixIt CLI 来快速创建一个网站。 16.1 命令 验证你是否安装了 Hugo v0.146.0 或更高版本。 hugo version 运行以下命令来创建一个带有 FixIt 主题的 Hugo 网站。下一节将对每个命令进行解释。 hugo new site my-blog cd my-blog git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml hugo server 通过终端中显示的 URL 查看你的站点。按 Ctrl + C 停止 Hugo 的开发服务器。 16.2 命令解释 在 my-blog 目录中为你的项目创建 目录结构骨架。 hugo new site my-blog 将当前目录更改为项目的根目录。 cd my-blog 在当前目录中初始化一个空的 Git 存储库。 git init 将 FixIt 主题作为 Git 子模块 添加到你的项目中的 themes 目录。 git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 在站点配置文件中添加一行，指定当前主题。 echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml 在站点配置文件中添加一行，指定默认的内容语言。 echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml 启动 Hugo 的开发服务器以查看站点。 hugo server 按 Ctrl + C 停止 Hugo 的开发服务器。 17 必要配置 为了能完整地使用 FixIt 主题的所有功能，务必在站点配置文件中添加以下内容。 [markup] _merge = \"shallow\" [outputs] _merge = \"shallow\" [taxonomies] _merge = \"shallow\" 以上配置表示继承 FixIt 主题的 markup，outputs 和 taxonomies 配置。 提示 在阅读完本文快速上手后，你可以参考 配置篇 来了解完整的主题配置。 18 添加内容 给你的网站添加新页面。 hugo new content posts/my-first-post.md Hugo 在 content/posts 目录中创建了该文件，使用编辑器打开文件。 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 请注意，front matter 中的 draft 值为 true。默认情况下，Hugo 在你构建网站时不会发布草稿内容。详细了解 草稿、未来和过期内容。 在帖子正文中添加一些 Markdown，但不要更改 draft 值。 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。 保存文件，然后启动 Hugo 的开发服务器来查看站点。你可以运行以下任一命令来包含草稿内容。 hugo server --buildDrafts hugo server -D hugo server -D --disableFastRender 由于本主题使用了 Hugo 中的 .Scratch 和 .Store 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 基本配置下的预览 当对新内容感到满意时，将 front matter 中的 draft 值更改为 false，然后保存文件。 注意 Hugo 的渲染引擎符合 Markdown 的 CommonMark 规范。 除此之外，FixIt 主题还支持一些 扩展 Markdown 语法。 19 发布网站 在此步骤中，你将发布你的网站，但不会 部署 它。 当你发布站点时，Hugo 在项目根目录的 public目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资源。 当你发布网站时，你通常不希望包含 草稿、未来或过期的内容，命令很简单。 hugo 我们的大多数用户使用 CI/CD 工作流程部署他们的网站，通过推送1到他们的 GitHub 或 GitLab 存储库会触发构建和部署。流行的提供商包括 Vercel2、Netlify3、AWS Amplify、CloudCannon、Cloudflare Pages、 GitHub pages 和 GitLab pages。 要了解如何部署站点，请参阅 托管和部署 部分。 20 文档指南 我们强烈建议你花少量时间完整阅读 FixIt 主题的文档，以便你更好地了解如何使用它。 安装篇 入门篇 内容管理 进阶篇 21 寻求帮助 如果你遇到问题或有任何疑问，请前往我们的 [社区][community] 寻求帮助。 Git 存储库包含整个项目目录，通常不包括 public 目录，因为站点是在推送后构建的。 ↩︎ 如何使用 Vercel 部署 Hugo 站点 ↩︎ 在 Netlify 上部署 Hugo ↩︎ ","date":"2023-02-20","objectID":"/zh-cn/documentation/getting-started/quick-start/:0:0","tags":["Installation","Basics"],"title":"快速上手","uri":"/zh-cn/documentation/getting-started/quick-start/"},{"categories":["Documentation"],"content":"List related content in \"Related content\" sections.","date":"2024-10-27","objectID":"/zh-cn/documentation/content-management/related/","tags":["Related","Content","Advanced"],"title":"相关内容","uri":"/zh-cn/documentation/content-management/related/"},{"categories":["Documentation"],"content":" 缺少翻译 本文尚未翻译完成，欢迎 参与翻译。 List related content in “Related content” sections. Hugo uses a set of factors to identify a page’s related content based on front matter parameters. This can be tuned to the desired set of indices and parameters or left to Hugo’s default Related Content configuration. Enable Related Content To enable related content, set the page.related.enable parameter to true in the site configuration file. [params] [params.page] [params.page.related] enable = true count = 5 position = [\"aside\", \"footer\"] 注意 If you want to hide a page from the related posts, set the hiddenFromRelated parameter to true in the page’s front matter. Configure Related Content Hugo provides a sensible default configuration of Related Content, but you can fine-tune this in your configuration, on the global or language level if needed. This section may be outdated. Refer to the Related content | Hugo for the latest information. Default Configuration Without any related configuration set on the project, Hugo’s Related Content methods will use the following. [related] includeNewer = false threshold = 80 toLower = false [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'keywords' pattern = '' toLower = false type = 'basic' weight = 100 [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'date' pattern = '' toLower = false type = 'basic' weight = 10 [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'tags' pattern = '' toLower = false type = 'basic' weight = 80 Custom configuration should be set using the same syntax. 提示 If you add a related configuration section, you need to add a complete configuration. It is not possible to just set, say, includeNewer and use the rest from the Hugo defaults. Top Level Configuration Options threshold (int) A value between 0-100. Lower value will give more, but maybe not so relevant, matches. includeNewer (bool) Set to true to include pages newer than the current page in the related content listing. This will mean that the output for older posts may change as new related content gets added. toLower (bool) Set to true to lower case keywords in both the indexes and the queries. This may give more accurate results at a slight performance penalty. Note that this can also be set per index. Configuration Options per Index name (string) The index name. This value maps directly to a page parameter. Hugo supports string values (author in the example) and lists (tags, keywords etc.) and time and date objects. type (string) One of basic(default) or fragments. applyFilter (string) Apply a type specific filter to the result of a search. This is currently only used for the fragments type. weight (int) An integer weight that indicates how important this parameter is relative to the other parameters. It can be 0, which has the effect of turning this index off, or even negative. Test with different values to see what fits your content best. cardinalityThreshold (int) If between 1 and 100, this is a percentage. All keywords that are used in more than this percentage of documents are removed. For example, setting this to 60 will remove all keywords that are used in more than 60% of the documents in the index. If 0, no keyword is removed from the index. Default is 0. pattern (string) This is currently only relevant for dates. When listing related content, we may want to list content that is also close in time. Setting “2006” (default value for date indexes) as the pattern for a date index will add weight to pages published in the same year. For busier blogs, “200601” (year and month) may be a better default. toLower (bool) See above. ","date":"2024-10-27","objectID":"/zh-cn/documentation/content-management/related/:0:0","tags":["Related","Content","Advanced"],"title":"相关内容","uri":"/zh-cn/documentation/content-management/related/"},{"categories":["Documentation"],"content":"这篇文档将展示如何在 FixIt 中使用 Shortcode 创建时间线。","date":"2024-07-21","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/timeline/","tags":["Timeline","Diagram","Shortcodes","Content"],"title":"扩展 Shortcode - Timeline","uri":"/zh-cn/documentation/content-management/shortcodes/extended/timeline/"},{"categories":["Documentation"],"content":"基础用法 Timeline 可拆分成多个按照时间戳正序或倒序排列的事件，时间戳和内容是必填项。 一个正序排列的时间线示例： 创建成功 2024-07-11通过审核 2024-07-13活动按期开始 2024-07-15 查看源码 {{\u003c timeline \u003e}} events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 {{\u003c /timeline \u003e}} 一个倒序排列的时间线示例： 活动按期开始 2024-07-15通过审核 2024-07-13创建成功 2024-07-11 查看源码 {{\u003c timeline reverse=true \u003e}} events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 {{\u003c /timeline \u003e}} 支持动画 Timeline 支持动画效果，可通过 animation 参数设置是否开启动画。 创建成功 2024-07-11通过审核 2024-07-13活动按期开始 2024-07-15 查看源码 {{\u003c timeline animation=true \u003e}} events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 {{\u003c /timeline \u003e}} ⾃定义节点样式 可根据实际场景⾃定义节点尺⼨、颜⾊、类型或者风格。 支持自定义风格 2024-07-19 20:30支持自定义颜色 2024-07-19 20:30支持自定义尺寸 2024-07-19 20:30默认样式的节点 2024-07-20 20:30 查看源码 {{\u003c timeline \u003e}} events: - timestamp: 2024-07-19 20:30 content: 支持自定义风格 type: primary node: dot - timestamp: 2024-07-19 20:30 content: 支持自定义颜色 color: \"#0CBD87\" - timestamp: 2024-07-19 20:30 content: 支持自定义尺寸 size: large - timestamp: 2024-07-20 20:30 content: 默认样式的节点 {{\u003c /timeline \u003e}} ⾃定义时间戳 当内容在垂直⽅向上过⾼时，可将时间戳置于内容之上。 2024-07-19 20:30 Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sint impedit magni soluta esse placeat facilis porro vitae facere explicabo. Architecto exercitationem accusamus omnis reiciendis beatae et inventore deserunt sequi recusandae.2024-07-19 20:30 Id amet sapiente quod temporibus molestiae? Quasi officia placeat magnam sapiente! Esse iure ipsam quia laboriosam dolorem at dolor est porro placeat, sequi magni maxime vel sint architecto. Placeat, laboriosam?2024-07-19 20:30 Expedita delectus rerum vitae consequuntur quam, tempore fugit debitis voluptatem praesentium maiores dolorem possimus illum adipisci facere veniam voluptatibus aliquam ipsa ducimus nam impedit cumque! Rerum molestias praesentium expedita! Itaque. 查看源码 {{\u003c timeline placement=top \u003e}} events: - timestamp: 2024-07-19 20:30 content: Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sint impedit magni soluta esse placeat facilis porro vitae facere explicabo. Architecto exercitationem accusamus omnis reiciendis beatae et inventore deserunt sequi recusandae. - timestamp: 2024-07-19 20:30 content: Id amet sapiente quod temporibus molestiae? Quasi officia placeat magnam sapiente! Esse iure ipsam quia laboriosam dolorem at dolor est porro placeat, sequi magni maxime vel sint architecto. Placeat, laboriosam? - timestamp: 2024-07-19 20:30 content: Expedita delectus rerum vitae consequuntur quam, tempore fugit debitis voluptatem praesentium maiores dolorem possimus illum adipisci facere veniam voluptatibus aliquam ipsa ducimus nam impedit cumque! Rerum molestias praesentium expedita! Itaque. {{\u003c /timeline \u003e}} 支持 MD/HTML 内容支持 Markdown 或者 HTML 格式。 🎉 Feat: add timeline support for code blocks 2024-07-20T22:28:19+08:00 Half a year later…🔖 Chore(release): 0.3.0 2024-01-01T14:54:19+08:00⬆️ Chore: update 0.2.11 2021-12-19T19:48:23+08:00 Developed for a long time…Feat: LoveIt =\u003e FixIt 2021-12-18T16:15:22+08:00 查看源码 {{\u003c timeline reverse=true \u003e}} events: - timestamp: 2021-12-18T16:15:22+08:00 content: \"Feat: [LoveIt](https://github.com/dillonzq/LoveIt) =\u003e [FixIt](https://github.com/hugo-fixit/FixIt)\" type: primary - timestamp: 2021-12-19T19:48:23+08:00 content: \":arrow_up: Chore: update 0.2.11\" - timestamp: 2021-12-19T19:48:23+08:00 content: \"\u003cspan class=\\\"text-secondary\\\"\u003e:(fa-regular fa-comment-dots): Developed for a long time...\u003c/span\u003e\" hideTimestamp: true type: secondary - timestamp: 2024-01-01T14:54:19+08:00 content: \":bookmark: Chore(release): 0.3.0\" type: success - timestamp: 2024-05-20T14:54:19+08:00 content: \"\u003cspan class=\\\"text-secondary\\\"\u003e:(fa-regular fa-comment-dots): Half a year later...\u003c/span\u003e\" hideTimestamp: true type: secondary - timestamp: 2024-07-20T22:28:19+08:00 content: \":tada: Feat: add timeline support for code blocks","date":"2024-07-21","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/timeline/:0:0","tags":["Timeline","Diagram","Shortcodes","Content"],"title":"扩展 Shortcode - Timeline","uri":"/zh-cn/documentation/content-management/shortcodes/extended/timeline/"},{"categories":["Documentation"],"content":"这篇文档将展示如何在 FixIt 中使用代码块扩展语法创建时间线。","date":"2024-07-20","objectID":"/zh-cn/documentation/content-management/timeline-support/","tags":["Timeline","Diagram","Markdown","Content"],"title":"代码块扩展语法 - 时间线（Timeline）","uri":"/zh-cn/documentation/content-management/timeline-support/"},{"categories":["Documentation"],"content":"基础用法 Timeline 可拆分成多个按照时间戳正序或倒序排列的事件，时间戳和内容是必填项。 一个正序排列的时间线示例： 创建成功 2024-07-11通过审核 2024-07-13活动按期开始 2024-07-15 查看源码 ```timeline events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 ``` 一个倒序排列的时间线示例： 活动按期开始 2024-07-15通过审核 2024-07-13创建成功 2024-07-11 查看源码 ```timeline {reverse=true} events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 ``` 支持动画 Timeline 支持动画效果，可通过 animation 参数设置是否开启动画。 创建成功 2024-07-11通过审核 2024-07-13活动按期开始 2024-07-15 查看源码 ```timeline {animation=true} events: - timestamp: 2024-07-11 content: 创建成功 - timestamp: 2024-07-13 content: 通过审核 - timestamp: 2024-07-15 content: 活动按期开始 ``` ⾃定义节点样式 可根据实际场景⾃定义节点尺⼨、颜⾊、类型或者风格。 支持自定义风格 2024-07-19 20:30支持自定义颜色 2024-07-19 20:30支持自定义尺寸 2024-07-19 20:30默认样式的节点 2024-07-20 20:30 查看源码 ```timeline events: - timestamp: 2024-07-19 20:30 content: 支持自定义风格 type: primary node: dot - timestamp: 2024-07-19 20:30 content: 支持自定义颜色 color: \"#0CBD87\" - timestamp: 2024-07-19 20:30 content: 支持自定义尺寸 size: large - timestamp: 2024-07-20 20:30 content: 默认样式的节点 ``` ⾃定义时间戳 当内容在垂直⽅向上过⾼时，可将时间戳置于内容之上。 2024-07-19 20:30 Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sint impedit magni soluta esse placeat facilis porro vitae facere explicabo. Architecto exercitationem accusamus omnis reiciendis beatae et inventore deserunt sequi recusandae.2024-07-19 20:30 Id amet sapiente quod temporibus molestiae? Quasi officia placeat magnam sapiente! Esse iure ipsam quia laboriosam dolorem at dolor est porro placeat, sequi magni maxime vel sint architecto. Placeat, laboriosam?2024-07-19 20:30 Expedita delectus rerum vitae consequuntur quam, tempore fugit debitis voluptatem praesentium maiores dolorem possimus illum adipisci facere veniam voluptatibus aliquam ipsa ducimus nam impedit cumque! Rerum molestias praesentium expedita! Itaque. 查看源码 ```timeline {placement=top} events: - timestamp: 2024-07-19 20:30 content: Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sint impedit magni soluta esse placeat facilis porro vitae facere explicabo. Architecto exercitationem accusamus omnis reiciendis beatae et inventore deserunt sequi recusandae. - timestamp: 2024-07-19 20:30 content: Id amet sapiente quod temporibus molestiae? Quasi officia placeat magnam sapiente! Esse iure ipsam quia laboriosam dolorem at dolor est porro placeat, sequi magni maxime vel sint architecto. Placeat, laboriosam? - timestamp: 2024-07-19 20:30 content: Expedita delectus rerum vitae consequuntur quam, tempore fugit debitis voluptatem praesentium maiores dolorem possimus illum adipisci facere veniam voluptatibus aliquam ipsa ducimus nam impedit cumque! Rerum molestias praesentium expedita! Itaque. ``` 支持 MD/HTML 内容支持 Markdown 或者 HTML 格式。 🎉 Feat: add timeline support for code blocks 2024-07-20T22:28:19+08:00 Half a year later…🔖 Chore(release): 0.3.0 2024-01-01T14:54:19+08:00⬆️ Chore: update 0.2.11 2021-12-19T19:48:23+08:00 Developed for a long time…Feat: LoveIt =\u003e FixIt 2021-12-18T16:15:22+08:00 查看源码 ```timeline {reverse=true} events: - timestamp: 2021-12-18T16:15:22+08:00 content: \"Feat: [LoveIt](https://github.com/dillonzq/LoveIt) =\u003e [FixIt](https://github.com/hugo-fixit/FixIt)\" type: primary - timestamp: 2021-12-19T19:48:23+08:00 content: \":arrow_up: Chore: update 0.2.11\" - timestamp: 2021-12-19T19:48:23+08:00 content: \"\u003cspan class=\\\"text-secondary\\\"\u003e:(fa-regular fa-comment-dots): Developed for a long time...\u003c/span\u003e\" hideTimestamp: true type: secondary - timestamp: 2024-01-01T14:54:19+08:00 content: \":bookmark: Chore(release): 0.3.0\" type: success - timestamp: 2024-05-20T14:54:19+08:00 content: \"\u003cspan class=\\\"text-secondary\\\"\u003e:(fa-regular fa-comment-dots): Half a year later...\u003c/span\u003e\" hideTimestamp: true type: secondary - timestamp: 2024-07-20T22:28:19+08:00 content: \":tada: Feat: add timeline support for code blocks\" type: danger ``` 多种格式支持 数据支持 JSON、YAML、TOML 三种格式。 一个 JSON 格式的时间线示例： 创建成功 2024-07-11通过审核 20","date":"2024-07-20","objectID":"/zh-cn/documentation/content-management/timeline-support/:0:0","tags":["Timeline","Diagram","Markdown","Content"],"title":"代码块扩展语法 - 时间线（Timeline）","uri":"/zh-cn/documentation/content-management/timeline-support/"},{"categories":["Documentation"],"content":"douyin shortcode 提供了一个内嵌的用来播放抖音视频的响应式播放器。","date":"2024-05-20","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/douyin/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - douyin","uri":"/zh-cn/documentation/content-management/shortcodes/extended/douyin/"},{"categories":["Documentation"],"content":"douyin shortcode 提供了一个内嵌的用来播放抖音视频的响应式播放器。 快速使用 视频 VideoID 可以通过 PC 端视频播放地址中获取。例如： https://www.douyin.com/video/7388149561765760266 一个 douyin 示例： {{\u003c douyin 7388149561765760266 \u003e}} Or {{\u003c douyin id=7388149561765760266 \u003e}} 呈现的输出效果如下： 详细参数 douyin shortcode 有以下命名参数： id [必需]（第一个位置参数） 抖音视频的 id。 ","date":"2024-05-20","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/douyin/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - douyin","uri":"/zh-cn/documentation/content-management/shortcodes/extended/douyin/"},{"categories":["Documentation"],"content":"spotify shortcode 提供了一个内嵌的响应式音乐播放器。","date":"2024-05-20","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/spotify/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - spotify","uri":"/zh-cn/documentation/content-management/shortcodes/extended/spotify/"},{"categories":["Documentation"],"content":"spotify shortcode 提供了一个内嵌的响应式音乐播放器。 快速使用 一个 spotify 示例： {{\u003c spotify type=artist id=74ASZWbe4lXaubB36ztrGX \u003e}} Or {{\u003c spotify artist 74ASZWbe4lXaubB36ztrGX \u003e}} 呈现的输出效果如下： 详细参数 spotify shortcode 有以下命名参数： type [必需] (第一个位置参数) Spotify 音乐的 type，可以是 艺术家、专辑、曲目 或 播放列表。 id [必需] (第二个位置参数) Spotify 音乐的 id，可以在 Spotify URL 中找到。 width [optional] (第三个位置参数) Spotify 音乐播放器的宽度。 height [optional] (第四个位置参数) Spotify 音乐播放器的高度。 ","date":"2024-05-20","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/spotify/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - spotify","uri":"/zh-cn/documentation/content-management/shortcodes/extended/spotify/"},{"categories":["Documentation"],"content":"探索 Hugo - FixIt 主题的的进阶使用。","date":"2024-04-06","objectID":"/zh-cn/documentation/advanced/","tags":["Advanced","Customization"],"title":"进阶篇","uri":"/zh-cn/documentation/advanced/"},{"categories":["Documentation"],"content":"探索 Hugo - FixIt 主题的的进阶使用。 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的。 通过定义自定义 .scss 样式文件，FixIt 主题支持可配置的样式。 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css。 在 assets/css/_override.scss 中，你可以覆盖 themes/FixIt/assets/css/_variables.scss 中的变量以自定义样式。 在 assets/css/_custom.scss 中，你可以添加一些 CSS 样式代码以自定义样式。 字体样式 以下字体样式均在 assets/css/_override.scss 中定义。 自定义全局字体，以开源字体 霞鹜文楷 为例： @import url('https://chinese-fonts-cdn.deno.dev/packages/lxgwwenkai/dist/LXGWWenKai-Regular/result.css'); $global-font-family: 'LXGW WenKai', $global-font-family; 自定义代码字体，以开源字体 Fira Mono 为例： @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, $code-font-family; 如果你想自定义的字体没有公共 CDN，你可以手动分包或 在线分包 发布到 NPM，以 沐目体 为例： @import url('https://cdn.jsdelivr.net/npm/mmt-webfont/dist/result.css'); $global-font-family: 'MMT', $global-font-family; 页面宽度 FixIt 主题提供了页面宽度配置选项 pageStyle 并提供三种选项。 narrow 保留 \u003cv0.2.13 页面目录宽度比 normal 新的默认页面目录宽度比 wide 较大的页面目录宽度比 另外，你还可以在 assets/css/_custom.scss 中，自定义 pageStyle 值 例如： pageStyle=\"custom\" [data-page-style='custom'] { @media only screen and (min-width: 1441px) { %page-style { width: Round(70%, 2px); } } @media only screen and (min-width: 1440px) { %page-style { width: Round(60%, 2px); } } @media only screen and (min-width: 1200px) { %page-style { width: Round(56%, 2px); } } } 打印样式 在 FixIt 主题中，提供有三个打印视图相关的 CSS 类 page-break-before 在元素之前插入分页符 page-break-after 在元素之后插入分页符 print-d-none 在打印视图中隐藏元素 下面是一个简单的例子： \u003cdiv class=\"page-break-before\"\u003e\u003c/div\u003e \u003cdiv class=\"page-break-after\"\u003e\u003c/div\u003e \u003cdiv class=\"print-d-none\"\u003e 你希望在打印视图中隐藏的某些内容写在此处。 \u003c/div\u003e 如果设置 goldmark.parser.attribute.block 为 true，你也可以这样用： {.page-break-before} {.page-break-after} 你希望在打印视图中隐藏的某些内容写在此处。 {.print-d-none} 自定义脚本 包含自定义脚本文件 custom.js 的目录相对于 你的项目根目录 的路径为 assets/js。 如果脚本文件 assets/js/custom.js 存在，它将在每篇文章和页面的末尾执行。 自定义模板 Hugo 允许你通过覆盖主题模板来改造主题，例如：你可以创建 layouts/404.html 文件以覆盖 themes/FixIt/layouts/404.html，从而实现自定义 FixIt 主题 404 页面模板的需求。 但是，对于主题的大多数模板，我们通常不建议你这样做，因为这样可能会导致未来升级主题困难。 为了避免升级冲突问题，基于这一特性，FixIt 主题开放了统一的自定义模板入口文件及配置，详见 [开放的自定义块][block]。 自定义 Admonition 你可以自定义 Admonition，甚至可以覆盖默认 Admonition。 要自定义 Admonition，请在站点配置文件中更改 params.admonition。例如： [params] [params.admonition] ban = \"fa-solid fa-ban\" 然后在项目目录 assets/css/_override.scss 中创建以下 SCSS 块： // Custom admonitions style $custom-admonition-map: ( ban: ( color: #ff3d00, bg-color: rgba(255, 61, 0, 0.1), ), ); $admonition-color-map: map-merge($admonition-color-map, $custom-admonition-map); 如果你需要修改自定义 Admonition 的默认标题，你可以在对应的语言文件中添加以下内容： [admonition] ban = \"禁止\" 之后，你可以在内容中使用自定义 Admonition： 禁止 Shortcode 语法： {{\u003c admonition ban \u003e}} 这是一个带有禁止图标的自定义 Admonition 类型。 {{\u003c /admonition \u003e}}Alert Markdown 扩展语法： \u003e [!ban] \u003e 这是一个带有禁止图标的自定义 Admonition 类型。提示 这只是主题文档的一个示例，并不包含在主题中。 自定义任务列表 你可以自定义 任务列表，甚至可以覆盖默认任务列表。 要自定义任务列表，请在站点配置文件中更改 params.taskList。例如： [params] [params.taskList] tip = \"fa-regular fa-lightbulb\" 如果你需要修改自定义任务列表的默认标题，你可以在对应的语言文件中添加以下内容： [task-list] tip = \"提示\" 之后，你可以在内容中使用自定义任务列表： - [tip] 这是一个带有提示图标的自定义任务列表类型。 呈现的输出效果如下： 这是一个带有提示图标的自定义任务列表类型。 如果你想修改任务列表默认样式，你可以在项目目录 assets/css/_custom.scss 中添加以下 SCSS 块： li[data-task='tip'] { --fi-task-color: #9974F7; --fi-checkbox-color: #EA9E36; } 上面的例子将改变任务列表的颜色，如下所示： 这是一个带有提示图标的自定义任务列表类型。 提示 这只是主题文档的一个示例，并不包含在主题中。 引入主题组件 本章节不对主题组件的概念或者开发进行赘述，如果你对此感兴趣，可以查看 [贡献指南 - 开发组件][components]。 为什么都是基于 FixIt 主题，别人博客的某些功能我却没有？ 在此之前，或许你也会有类似的疑问。其实，很有可能他们引入了额外的主题组件。 接下来以 component-projects 组件为例介绍如何引入一个主题组件，大多数组件引入方式类似。 首先，安装组件 安装方式与 安装主题 相同，有多种安装方式，任选一种即可，这里介绍两种主流方式。 作为 Hugo 模块安装 首先确保你的项目本身是一个 Hugo 模块。 然后将此主题组件添加到你的 hugo.toml 配置文件中： [module] [[module.imports]] path = \"github.com/hugo-fixit/FixIt\" [[module.imports]] path = \"github.com/hugo-fixit/component-projects\" 在 Hugo 的第一次启动时，它将下载所需的文件。 作为 Git 子模块安装 将 FixIt 和此 git 存储库克隆到你的主题文件夹中，并将其作为网站目录的子模块添加。 git submodule add https://github.com/hugo-fixit/component-projects.git themes/component-projects 接下来编辑项目的 hugo.toml 并将此主题组件添加到你的主题中： theme = [\"FixIt\", \"component-projects\"] 注入 Partial 主题组件通常需要一些第三方资源，例如 CSS 或 JavaScript 等。一般来说，","date":"2024-04-06","objectID":"/zh-cn/documentation/advanced/:0:0","tags":["Advanced","Customization"],"title":"进阶篇","uri":"/zh-cn/documentation/advanced/"},{"categories":["Documentation"],"content":"了解如何配置你的 Hugo FixIt 站点。","date":"2024-03-07","objectID":"/zh-cn/documentation/getting-started/configuration/","tags":["Configuration","Installation","Basics"],"title":"配置 FixIt","uri":"/zh-cn/documentation/getting-started/configuration/"},{"categories":["Documentation"],"content":"了解如何配置你的 Hugo FixIt 站点。 配置文件 Hugo 有一些全局配置设置，但这不在本文的讨论范围之内。 在开始配置之前，建议你执行以下命令，将主题的默认 hugo.toml 复制到你的项目中： mv hugo.toml hugo.old.toml cp themes/FixIt/hugo.toml hugo.toml echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml 作为进阶使用，你也可以将你的配置按环境、根配置键和语言拆分，而不是一个单独的站点配置文件。 更多细节可以在 配置 Hugo 页面找到。 合并配置 如果你不需要像上面的默认设置那样那么详细，你也可以 从主题中合并配置。 例如，从 FixIt 主题中合并 markup 配置： [markup] _merge = \"shallow\" _merge 的配置值可以是以下之一： none 不合并。 shallow 只为新键添加值。 deep 为新键添加值，合并现有值。 重要 如果你希望简化配置文件，请确保以下配置必须从主题合并： [markup] _merge = \"shallow\" [outputs] _merge = \"shallow\" [taxonomies] _merge = \"shallow\" 菜单配置 Hugo 有一个简单而强大的 菜单系统。 根据 Hugo 提供的接口，FixIt 主题只实现了部分功能，这足以满足大多数人的需求，也让用户在使用上更加简单。 注意 考虑到实用性和排版问题，FixIt 主题只支持两层嵌套的菜单，通过在菜单配置中的 parent 字段即可。 一个菜单项的父项应该是另一个菜单项的标识符（identifier），在菜单中标识符应该是唯一的。 下面是一个完整的菜单项配置： [menu] [[menu.main]] identifier = \"\" # 父级菜单项的标识符 (identifier) parent = \"\" # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 pre = \"\" # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 post = \"\" name = \"\" url = \"\" # 当你将鼠标悬停在此菜单链接上时，将显示的标题 title = \"\" weight = 1 # 向菜单项添加用户定义的内容 [menu.main.params] # 添加 CSS 类到菜单项 class = \"\" # 是否为草稿菜单，类似草稿页面 draft = false # 添加 fontawesome 图标到菜单项 icon = \"\" # 设置菜单项类型，可选值：[\"mobile\", \"desktop\"] type = \"\" # 是否显示子菜单项分割线 divided = false 提示 菜单项的链接（url）支持内部链接、外部链接或者为空。 为空时点击菜单项不会跳转，这对于一些有子菜单的菜单项非常有用。 另外，也可以通过配置页面（即 .md 文件）的 front matter 添加内容到菜单中。 这是一个 yaml 示例： --- title: 配置 Fixit author: Lruihao menu: main: title: 了解如何配置你的 Hugo FixIt 站点。 parent: documentation weight: 3 params: icon: fa-brands fa-readme # ... --- 解析配置 通过根配置键 markup 配置将标记语言转为 HTML。 本节仅记录FixIt主题的一些 必要配置。有关更多详细信息，请参阅 Configure markup 页面。 [markup] [markup.highlight] codeFences = true lineNos = true lineNumbersInTable = true noClasses = false 分类法配置 FixIt 主题内置了三个维度的 分类法：分类、标签和合集。主题默认 taxonomies 配置如下： [taxonomies] category = \"categories\" tag = \"tags\" collection = \"collections\" 如果你希望 taxonomies 配置始终保持和主题一致，你可以设置 taxonomies._merge 为 shallow。 之后，你可以对文章进行分类，例如： --- title: 配置 FixIt date: 2024-03-07T15:37:59+08:00 tags: - Configuration - Installation - Basics categories: - Documentation collections: - Getting Started --- 自定义输出格式 Hugo 可以输出多种格式的内容，FixIt 主题利用了这个功能。为了完全配置主题，请将以下选项配置到 hugo.toml 中。 有关输出格式配置的更多详细信息，请参阅 自定义输出格式 页面。 [mediaTypes] [mediaTypes.\"text/markdown\"] suffixes = [\"md\"] [outputFormats] # 用于输出 /archives/index.html 文件的设置 [outputFormats.archives] path = \"archives\" baseName = \"index\" mediaType = \"text/html\" isPlainText = false isHTML = true permalinkable = true # 用于输出 /offline/index.html 文件的设置 [outputFormats.offline] path = \"offline\" baseName = \"index\" mediaType = \"text/html\" isPlainText = false isHTML = true permalinkable = true # 用于输出 readme.md 文件的设置 [outputFormats.readme] baseName = \"readme\" mediaType = \"text/markdown\" isPlainText = true isHTML = false # 用于输出 baidu_urls.txt 文件的设置 [outputFormats.baidu_urls] baseName = \"baidu_urls\" mediaType = \"text/plain\" isPlainText = true isHTML = false # 用于输出 search.json 文件的设置 [outputFormats.search] baseName = \"search\" mediaType = \"application/json\" rel = \"search\" isPlainText = true isHTML = false permalinkable = true 基本上你无需配置 mediaTypes 和 outputFormats 的配置，因为 FixIt 主题已经为你配置好了。你只需要配置 outputs 部分即可。 # 用于 Hugo 输出文档的设置，可选值如下： # home = [\"html\", \"rss\", \"archives\", \"offline\", \"readme\", \"baidu_urls\", \"search\"] # page = [\"html\", \"markdown\"] # section = [\"html\", \"rss\"] # taxonomy = [\"html\"] # term = [\"html\", \"rss\"] [outputs] home = [\"html\", \"rss\", \"archives\", \"offline\", \"search\"] page = [\"html\", \"markdown\"] section = [\"html\", \"rss\"] taxonomy = [\"html\"] term = [\"html\", \"rss\"] 如果你希望 outputs 配置始终保持和主题一致，你可以设置 outputs._merge 为 shallow。 主题配置 除了 Hugo 全局配置外，FixIt 还通过根配置键 params 提供了一些主题配置。 一个简单的例子： baseURL = 'https://example.org/' languageCode = 'en' title = 'ABC Widgets, Inc.' [params] version = \"0.3.X\" description = \"This is my new Hugo FixIt site\" keywords = [\"Hugo\", \"FixIt\"] # ... All theme configuration settings are as follows: 所有 FixIt 主题配置设置如下： version string FixIt 主题版本，例如：0.3.X, 0.3.0, v0.3.0 等。 description string 网站描述。 keywords string array 网站关键词。 defaultTheme string 网站默认主题样式，默认：auto，可选值可以是以下之一： light 浅色主","date":"2024-03-07","objectID":"/zh-cn/documentation/getting-started/configuration/:0:0","tags":["Configuration","Installation","Basics"],"title":"配置 FixIt","uri":"/zh-cn/documentation/getting-started/configuration/"},{"categories":["Documentation"],"content":"只需几个步骤即可为你的 Hugo 站点安装 FixIt 主题。","date":"2024-01-18","objectID":"/zh-cn/documentation/installation/","tags":["Installation"],"title":"安装主题","uri":"/zh-cn/documentation/installation/"},{"categories":["Documentation"],"content":"只需几个步骤即可为你的 Hugo 站点安装 FixIt 主题。 在 hugo.toml 中配置默认主题为 FixIt，例如 theme = \"FixIt\" 通过以下其中一种方式安装主题 先决条件 由于 Hugo 提供的便利性，Hugo 可能是此主题的唯一依赖项。 尽管不是在所有情况下都需要，但是在使用 Hugo 时通常会使用 Git、Go、Dart Sass 和 Node.js。 Git 用于： 从源代码构建 Hugo 使用 Hugo 模块 功能 将主题安装为 Git 子模块 从本地 Git 存储库访问 提交信息 使用 CloudCannon、Cloudflare Pages、GitHub Pages、GitLab Pages 和 Netlify 等服务托管你的站点 Go 用于： 从源代码构建 Hugo 使用 Hugo 模块功能 Dart Sass 用于在使用 Sass 语言的最新功能时将 Sass 转译为 CSS。 Node.js 用于： 使用 FixIt CLI 使用一些自动化工具，例如 请参考相关文档以获取安装说明： Hugo（扩展版，v0.146.0 或更高版本） Git Go Dart Sass（尚未使用） Node.js（v16.0.0 或更高版本） 手动安装 你可以下载主题的 最新版本  .zip 文件 并将其解压到 themes 目录中。 要升级主题，请用新主题替换旧主题。 Git 克隆 这种方式，只需将 FixIt 主题克隆到 themes 目录中即可。 git clone https://github.com/hugo-fixit/FixIt.git themes/FixIt 通过从存储库中拉取最新提交来升级主题。 cd themes/FixIt git pull Git 子模块 点击快速创建博客！ https://github.com/hugo-fixit/hugo-fixit-starter1/generate 在当前目录中初始化一个空的 Git 存储库。 git init 将 FixIt 添加到你的项目中，作为一个 Git 子模块 存储在 themes 目录中的。 git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 要使用 dev 分支上的版本，可以使用以下命令： git submodule add -b dev https://github.com/hugo-fixit/FixIt.git themes/FixIt # 或者，将子模块分支从 `main` 切换到 `dev`： git submodule set-branch -b dev themes/FixIt 使用以下命令升级主题： git submodule update --remote --merge themes/FixIt Hugo 模块 点击快速创建博客！ https://github.com/hugo-fixit/hugo-fixit-starter/generate 技巧 以这种方式，无需要在 hugo.toml 中配置 theme = \"FixIt\"。 将 Hugo 模块 用于主题的最简单方法是将其导入配置中。请参阅 使用 Hugo 模块。 初始化 Hugo 模块系统：hugo mod init github.com/\u003cyour_user\u003e/\u003cyour_project\u003e 导入主题： [module] [[module.imports]] path = \"github.com/hugo-fixit/FixIt\" 要更新或管理版本，你可以使用 hugo mod get 命令。 # 更新所有模块 hugo mod get -u # 更新所有模块及其依赖 hugo mod get -u ./... # 更新一个模块 hugo mod get -u github.com/hugo-fixit/FixIt # 获取特定版本（例如 v0.3.2, @latest, @main） hugo mod get github.com/hugo-fixit/FixIt@v0.3.2 CLI FixIt 提供了一个官方 CLI，用于快速搭建 Hugo FixIt 站点骨架。它提供了基于 Git 子模块和 Hugo 模块两种方式来快速搭建 Hugo FixIt 站点，并提供了查看 FixIt 主题最新版本的功能。有关更多详细信息，请参阅 FixIt CLI 文档。 npx fixit-cli create my-blog 提醒 CLI 假定你事先了解 Hugo 和 FixIt。如果你是 Hugo 或 FixIt 的新手，我们强烈建议你在使用 CLI 之前先阅读 主题文档，不要使用任何脚手架工具。 比较 手动安装 Git 克隆 Git 子模块 Hugo 模块 先决条件 Hugo Hugo, Git Hugo, Git Hugo, Git, Go 是否易于安装？ ✅ ✅ ✅ ✅ 是否方便升级或降级容易？ ✔️ ✔️ ✅ ✅ 下载速度如何？ ❌ ❌ ✔️ ✅ 是否可以自动更新？ ❌ ❌ ✅ ✅ 是否可以使用最新版本？ ✅ ✅ ✅ ✅ ","date":"2024-01-18","objectID":"/zh-cn/documentation/installation/:0:0","tags":["Installation"],"title":"安装主题","uri":"/zh-cn/documentation/installation/"},{"categories":["Documentation"],"content":"这篇文档将展示如何在 FixIt 中使用代码块扩展语法创建 SVG 和 Canvas 图表。 GoAT GoATGo ASCII Tool 是 markdeep.mini.js 图像生成器的 Go 语言实现。 要使用 GoAT，只需将 ASCII 输入放在代码块中，并将语言设置为 goat。 ```goat // ASCII input here ``` 以下是使用 GoAT 生成 SVG 的一些示例。 查看更多示例 。 树 ```goat . . . .--- 1 .-- 1 / 1 / \\ | | .---+ .-+ + / \\ .---+---. .--+--. | '--- 2 | '-- 2 / \\ 2 + + | | | | ---+ ---+ + / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 / \\ / \\ | | | | | | | | '---+ '-+ + 1 2 3 4 1 2 3 4 1 2 3 4 '--- 4 '-- 4 \\ 4 ``` 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 重叠 ```goat .-. .-. .-. .-. .-. .-. | | | | | | | | | | | | .---------. .--+---+--. .--+---+--. .--| |--. .--+ +--. .------|--. | | | | | | | | | | | | | | | | | | '---------' '--+---+--' '--+---+--' '--| |--' '--+ +--' '--|------' | | | | | | | | | | | | '-' '-' '-' '-' '-' '-' ``` 线条装饰 ```goat ________ o * * .--------------. *---+--. | | o o | ^ \\ / | .----------. | | | '--* -+- | | v / \\ / | | \u003c------. | | | '-----\u003e .---(---' ---\u003e*\u003c--- / .+-\u003e*\u003c--o----' | | | | | \u003c--' ^ ^ | | | | | ^ \\ | '--------' | | \\/ *-----' o |\u003c-----\u003e| '-----' |__| v '------------' | /\\ *---------------' ``` 线端 ```goat o--o *--o / / * o o o o o * * * * o o o o * * * * o o o o * * * * o--* *--* v v ^ ^ | | | | | | | | \\ \\ \\ \\ \\ \\ \\ \\ / / / / / / / / o--\u003e *--\u003e * o / / o * v ' o * v ' o * v \\ o * v \\ o * v / o * v / o--- *--- ^ ^ ^ ^ . . . . ^ ^ ^ ^ \\ \\ \\ \\ ^ ^ ^ ^ / / / / | | * o \\ \\ * o | | | | | | | | \\ \\ \\ \\ \\ \\ \\ \\ / / / / / / / / v v ^ ^ v v ^ ^ o * v ' o * v ' o * v \\ o * v \\ o * v / o * v / * o | | * o \\ \\ \u003c--o \u003c--* \u003c--\u003e \u003c--- ---o ---* ---\u003e ---- *\u003c-- o\u003c-- --\u003eo --\u003e* ``` 点网格 ```goat o o o o o * * * * * * * o o * o o o * * * o o o · * · · · · · · o o o o o * * * * * o o o o * o o o o * * * * * o * * · * * · · · · · · o o o o o * * * * * o * o o o o o o o o * * * * * o o o o o · o · · o · · * * · o o o o o * * * * * o * o o o o o o o * * * * o * o o · · · · o · · * · o o o o o * * * * * * * * * o o o o * * * o * o · · · · · · · * ``` · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · 大节点 ```goat .---. .-. .-. .-. .-. | A +-----\u003e| 1 +\u003c----\u003e| 2 |\u003c----+ 4 +------------------. | 8 | '---' '-' '+' '-' | '-' | ^ | ^ v | v | .-. .-+-. .-. .-+-. .-. .+. .---. | 3 +----\u003e| B |\u003c-----\u003e| 5 +----\u003e| C +----\u003e| 6 +----\u003e| 7 |\u003c----\u003e| D | '-' '---' '-' '---' '-' '-' '---' ``` A 1 2 3 4 B 5 C 6 8 7 D 小网格 ```goat ___ ___ .---+---+---+---+---. .---+---+---+---. .---. .---. ___/ \\___/ \\ | | | | | | / \\ / \\ / \\ / \\ / | +---+ | / \\___/ \\___/ +---+---+---+---+---+ +---+---+---+---+ +---+ +---+ \\___/ b \\___/ \\ | | | b | | | \\ / \\a/ \\b/ \\ / \\ | +---+ | / a \\___/ \\___/ +---+---+---+---+---+ +---+---+---+---+ +---+ b +---+ \\___/ \\___/ \\ | | a | | | | / \\ / \\ / \\ / \\ / | a +---+ | \\___/ \\___/ '---+---+---+---+---' '---+---+---+---' '---' '---' ``` a b a b a b a b 大网格 ```goat .----. .----. / \\ / \\ .-----+-----+-----. + +----+ +----. | | | | .-----+-----+-----+-----+ \\ / \\ / \\ | | | | / / / / / +----+ B +----+ + +-----+-----+-----+ +-----+-----+-----+-----+ / \\ / \\ / | | | | / / / / / + A +----+ +----+ | | B | | +-----+-----+-----+-----+ \\ / \\ / \\ +-----+-----+-----+ / / A / B / / '----+ +----+ + | | | | +-----+-----+-----+-----+ \\ / \\ / | A | | | / / / / / '----' '----' '-----+-----+-----' '-----+-----+-----+-----+ ``` A B A B A B 复杂图表 ```goat +-------------------+ ^ .---. | A Box |__.--.__ __.--\u003e | .-. | | | | '--' v | * |\u003c--- | | +-------------------+ '-' | | Round *---(-. | .-----------------. .-------. .----------. .-------. | | | | Mixed Rounded | | | / Diagonals \\ | | | | | | | \u0026 Square Corners | '--. .--' / \\ |---+---| '-)-' .--------. '--+------------+-' .--. | '-------+--------' | | | | / Search / | | | | '---. | '-------' | '-+------' |\u003c----------\u003e| | | | v Interior | ^ ' \u003c---' '----' .-----------. ---. .--- v | .------------------. Diag line | .-------. +---. \\ / . | | if (a \u003e b) +---. .---\u003e| | | | | Curved line \\ / / \\ | | obj-\u003efcn() | \\ / | '-------' |\u003c--' + / \\ | '------------------' '--' '--+--------' .--. .--. | .-. +Done?+-' .---+-----. | ^ |\\ | ","date":"2023-03-22","objectID":"/zh-cn/documentation/content-management/diagrams/:0:0","tags":["Diagram","GoAT","Mermaid","Echarts","Markdown","Content","Advanced"],"title":"代码块扩展语法 - 图表支持","uri":"/zh-cn/documentation/content-management/diagrams/"},{"categories":["Documentation"],"content":"typeit shortcode 基于 TypeIt 提供了打字动画。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/typeit/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - typeit","uri":"/zh-cn/documentation/content-management/shortcodes/extended/typeit/"},{"categories":["Documentation"],"content":"typeit shortcode 基于 TypeIt 提供了打字动画。 只需将你需要打字动画的内容插入 typeit shortcode 中即可。 typeit shortcode 有以下命名参数： tag [可选] 内容容器的 HTML 标签。 code [可选] 指定代码内容语言类型，可以实习语法高亮。 code-link [可选] 是否解析代码内容中的 Markdown 链接，默认：false。 group [可选] 内容分组，相同分组的内容将按顺序开始打字动画。 speed [可选] 每一步的打字速度 (单位是毫秒)，默认：100。 cursorSpeed [可选] 光标闪烁速度 (单位是毫秒)，默认：1000。 cursorChar [可选] 光标使用的字符 (支持 HTML 格式)，默认：|。 duration [可选] 打字动画完成后光标持续时间 (单位是毫秒，-1 表示无限)，默认：-1。 loop [可选] 内容是否会在打字动画完成后继续循环。 简单内容 允许使用 Markdown 格式的简单内容，并且 不包含 富文本的块内容，例如图像等等…… 一个 typeit 示例： {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*…… {{\u003c /typeit \u003e}} 呈现的输出效果如下： 这一个带有基于 TypeIt 的 打字动画 的 段落…… 另外，你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例： {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*…… {{\u003c /typeit \u003e}} 呈现的输出效果如下： 这一个带有基于 TypeIt 的 打字动画 的 段落…… 代码内容 代码内容也是允许的，并且通过使用参数 code 指定语言类型可以实现语法高亮。 一个带有 code 参数的 typeit 示例： {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下： public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } 分组内容 默认情况下，所有打字动画都是同时开始的。 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画。 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画。 一个带有 group 参数的 typeit 示例： {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下： 首先, 这个段落开始 然后, 这个段落开始 循环内容 默认情况下，打字动画完成后将停止。 如果你需要内容在打字动画完成后继续循环，可以使用 loop 参数。 一个带有 loop 参数的 typeit 示例： {{\u003c typeit loop=true \u003e}} 这个段落将会循环…… {{\u003c /typeit \u003e}} 呈现的输出效果如下： 这个段落将会循环…… ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/typeit/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - typeit","uri":"/zh-cn/documentation/content-management/shortcodes/extended/typeit/"},{"categories":["Documentation"],"content":"bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/bilibili/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - bilibili","uri":"/zh-cn/documentation/content-management/shortcodes/extended/bilibili/"},{"categories":["Documentation"],"content":"bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器。 快速使用 如果视频只有一个部分，则仅需要视频的 BV id, 例如： https://www.bilibili.com/video/BV19S411c7Wu 一个 bilibili 示例： {{\u003c bilibili BV19S411c7Wu \u003e}} 或者 {{\u003c bilibili id=BV19S411c7Wu \u003e}} 呈现的输出效果如下： 如果视频包含多个部分，则除了视频的 BV id 之外，还需要 p, 默认值为 1, 例如： https://www.bilibili.com/video/BV1kt411k7Rq?p=3 一个带有 p 参数的 bilibili 示例： {{\u003c bilibili BV1kt411k7Rq 3 \u003e}} 或者 {{\u003c bilibili id=BV1kt411k7Rq p=3 \u003e}} 呈现的输出效果如下： 详细参数 bilibili shortcode 有以下命名参数： id [必需]（第一个位置参数） 视频的 BV id。 p [可选]（第二个位置参数） 多 P 视频的集数。从 1 开始计数，默认值为 1。 autoplay [可选] 是否自动播放，默认值为 false。 poster [可选] 是否展示封面，默认值为 true。 muted [可选] 是否静音，默认值为 false。 danmaku [可选] 是否开启弹幕，默认值为 true。 t [可选] 跳转到媒体的初始时间点，默认值为 0，单位：秒。 ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/bilibili/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - bilibili","uri":"/zh-cn/documentation/content-management/shortcodes/extended/bilibili/"},{"categories":["Documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/music/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - music","uri":"/zh-cn/documentation/content-management/shortcodes/extended/music/"},{"categories":["Documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器。 有三种方式使用 music shortcode。 自定义音乐 URL 支持 本地资源引用 的完整用法。 music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接。 type [可选] 音乐的名称。 artist [可选] 音乐的创作者。 cover [可选] 音乐的封面链接。 一个使用自定义音乐 URL 的 music 示例： {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下： 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别： auto [必需]]（第一个位置参数） 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台。 一个使用音乐平台 URL 的自动识别的 music 示例： {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下： 自定义音乐平台，类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台： server [必需]（第一个位置参数） [netease, tencent, kugou, xiami, baidu] 音乐平台。 type [必需]（第二个位置参数） [song, playlist, album, search, artist] 音乐类型。 id [必需]（第三个位置参数） 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词，或者创作者 ID。 一个使用自定义音乐平台的 music 示例： {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下： 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数： theme [可选] 音乐播放器的主题色，默认值是 #448aff。 fixed [可选] 是否开启固定模式，默认值是 false。 mini [可选] 是否开启迷你模式，默认值是 false。 autoplay [可选] 是否自动播放音乐，默认值是 false。 volume [可选] 第一次打开播放器时的默认音量，会被保存在浏览器缓存中，默认值是 0.7。 mutex [可选] 是否自动暂停其它播放器，默认值是 true。 music shortcode 还有一些只适用于音乐列表方式的其它命名参数： loop [可选] [all, one, none] 音乐列表的循环模式，默认值是 none。 order [可选] [list, random] 音乐列表的播放顺序，默认值是 list。 list-folded [可选] 初次打开的时候音乐列表是否折叠，默认值是 false。 list-max-height [可选] 音乐列表的最大高度，默认值是 340px。 ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/music/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - music","uri":"/zh-cn/documentation/content-management/shortcodes/extended/music/"},{"categories":["Documentation"],"content":"mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/mapbox/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - mapbox","uri":"/zh-cn/documentation/content-management/shortcodes/extended/mapbox/"},{"categories":["Documentation"],"content":"mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能。 参数 Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源，将它们渲染成互动式地图。 mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需]（第一个位置参数） 地图初始中心点的经度，以度为单位。 lat [必需]（第二个位置参数） 地图初始中心点的纬度，以度为单位。 zoom [可选]（第三个位置参数） 地图的初始缩放级别，默认值是 10。 marked [可选]（第四个位置参数） 是否在地图的初始中心点添加图钉，默认值是 true。 light-style [可选]（第五个位置参数） 浅色主题的地图样式，默认值是 Front matter 或者 主题配置 中设置的值。 dark-style [可选]（第六个位置参数） 深色主题的地图样式，默认值是 Front matter 或者 主题配置 中设置的值。 markers [可选] （第七个位置参数） 地图标记的数组，数组元素是对象，对象包含 lng、lat 和 description 三个属性。 navigation [可选] 是否添加 NavigationControl, 默认值是 Front matter 或者 主题配置 中设置的值。 geolocate [可选] 是否添加 GeolocateControl, 默认值是 Front matter 或者 主题配置 中设置的值。 scale [可选] 是否添加 ScaleControl, 默认值是 Front matter 或者 主题配置 中设置的值。 fullscreen [可选] 是否添加 FullscreenControl, 默认值是 Front matter 或者 主题配置 中设置的值。 width [可选] 地图的宽度，默认值是 100%。 height [可选] 地图的高度，默认值是 20rem。 简单示例 一个简单的 mapbox 示例： {{\u003c mapbox 113.953277 22.559102 11 \u003e}} 或者 {{\u003c mapbox lng=113.953277 lat=22.559102 zoom=11 \u003e}} 呈现的输出效果如下： 自定义样式 一个带有自定义样式的 mapbox 示例： {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下： 多标记示例 一个带有多个标记的 mapbox 示例： {{\u003c mapbox lng=113.953277 lat=22.559102 markers=\"[{\\\"lng\\\": 113.81841, \\\"lat\\\": 22.637524, \\\"description\\\": \\\"宝安国际机场\\\"},{\\\"lng\\\": 113.953386, \\\"lat\\\": 22.559052, \\\"description\\\": \\\"标记 2\\\"},{\\\"lng\\\": 114.035746,\\\"lat\\\": 22.615667, \\\"description\\\": \\\"深圳北站\\\"}]\" \u003e}} ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/mapbox/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - mapbox","uri":"/zh-cn/documentation/content-management/shortcodes/extended/mapbox/"},{"categories":["Documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/echarts/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - echarts","uri":"/zh-cn/documentation/content-management/shortcodes/extended/echarts/"},{"categories":["Documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能。 简介 ECharts 是一个帮助你生成交互式数据可视化的库。 ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K 线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭。 如何使用 只需在 echarts shortcode 中以 JSON、YAML 或 TOML 等格式插入 ECharts 选项即可。 JSON 格式 一个 JSON 格式的 echarts 示例： {\"grid\":{\"bottom\":\"5%\",\"containLabel\":true,\"left\":\"5%\",\"right\":\"5%\",\"top\":\"20%\"},\"legend\":{\"data\":[\"邮件营销\",\"联盟广告\",\"视频广告\",\"直接访问\",\"搜索引擎\"],\"top\":\"10%\"},\"series\":[{\"data\":[120,132,101,134,90,230,210],\"name\":\"邮件营销\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[220,182,191,234,290,330,310],\"name\":\"联盟广告\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[150,232,201,154,190,330,410],\"name\":\"视频广告\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[320,332,301,334,390,330,320],\"name\":\"直接访问\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[820,932,901,934,1290,1330,1320],\"name\":\"搜索引擎\",\"stack\":\"总量\",\"type\":\"line\"}],\"title\":{\"left\":\"center\",\"text\":\"折线统计图\",\"top\":\"2%\"},\"toolbox\":{\"feature\":{\"saveAsImage\":{\"title\":\"保存为图片\"}}},\"tooltip\":{\"trigger\":\"axis\"},\"xAxis\":{\"boundaryGap\":false,\"data\":[\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"周日\"],\"type\":\"category\"},\"yAxis\":{\"type\":\"value\"}} 查看源码 {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} YAML 格式 一个 YAML 格式的 echarts 示例： {\"grid\":{\"bottom\":\"5%\",\"containLabel\":true,\"left\":\"5%\",\"right\":\"5%\",\"top\":\"20%\"},\"legend\":{\"data\":[\"邮件营销\",\"联盟广告\",\"视频广告\",\"直接访问\",\"搜索引擎\"],\"top\":\"10%\"},\"series\":[{\"data\":[120,132,101,134,90,230,210],\"name\":\"邮件营销\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[220,182,191,234,290,330,310],\"name\":\"联盟广告\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[150,232,201,154,190,330,410],\"name\":\"视频广告\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[320,332,301,334,390,330,320],\"name\":\"直接访问\",\"stack\":\"总量\",\"type\":\"line\"},{\"data\":[820,932,901,934,1290,1330,1320],\"name\":\"搜索引擎\",\"stack\":\"总量\",\"type\":\"line\"}],\"title\":{\"left\":\"center\",\"text\":\"折线统计图\",\"top\":\"2%\"},\"toolbox\":{\"feature\":{\"saveAsImage\":{\"title\":\"保存为图片\"}}},\"tooltip\":{\"trigger\":\"axis\"},\"xAxis\":{\"boundaryGap\":false,\"data\":[\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\",\"周日\"],\"type\":\"category\"},\"yAxis\":{\"type\":\"value\"}} 查看源码 {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} TOML 格式 一个 TOML 格式的 echarts 示例： {\"grid\":{\"bottom\":\"5%\",\"containLabel\":true,\"left\":\"5%\",\"right\":\"5%\",\"top\":\"20%\"},\"legend\":{\"data\":[\"邮件营销\",\"联盟广告\",\"视频广告\",\"直接访问\",\"搜索引擎\"],\"top\":\"10%\"},\"series\":[{\"data\":[120,132,101,134,","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/echarts/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - echarts","uri":"/zh-cn/documentation/content-management/shortcodes/extended/echarts/"},{"categories":["Documentation"],"content":"admonition shortcode 允许你在内容中添加各种类型的标注。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/admonition/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - admonition","uri":"/zh-cn/documentation/content-management/shortcodes/extended/admonition/"},{"categories":["Documentation"],"content":"admonition shortcode 允许你在内容中添加各种类型的标注。 这是 FixIt 主题提供的扩展 shortcode。 为了更好的跨平台兼容性，推荐使用 Alert Markdown 扩展语法。 Parameters admonition shortcode 有以下命名参数，位置参数按照从上到下的顺序排列： 参数 说明 类型 默认值 type admonition 横幅的类型。见 支持的类型 string note title admonition 横幅的标题。（支持 Markdown 和 HTML 格式） string type 参数值 open 横幅内容是否默认展开。 boolean true 基础用法 一个 admonition 示例： {{\u003c admonition type=quote title=\"[FixIt](https://github.com/hugo-fixit/FixIt)\" open=true \u003e}} 一个**简洁**、**优雅**且**高效**的 [Hugo](https://gohugo.io/) 博客主题。 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition quote \"[FixIt](https://github.com/hugo-fixit/FixIt)\" true \u003e}} 一个**简洁**、**优雅**且**高效**的 [Hugo](https://gohugo.io/) 博客主题。 {{\u003c /admonition \u003e}} 呈现的输出效果如下： FixIt 一个简洁、优雅且高效的 Hugo 博客主题。 支持的类型 admonition shortcode 支持 13 种类型的横幅，除非你 自定义 Admonition，否则任何不支持的类型都会默认为 note 类型。类型标识不区分大小写。 完整示例如下： 注意 {{\u003c admonition \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}} 摘要 {{\u003c admonition abstract \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：summary, tldr 信息 {{\u003c admonition info \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}} 待办 {{\u003c admonition todo \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}} 技巧 {{\u003c admonition tip \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：hint, important 成功 {{\u003c admonition success \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：check, done 问题 {{\u003c admonition question \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：help, faq 警告 {{\u003c admonition warning \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：caution, attention 失败 {{\u003c admonition failure \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}别名：fail, missing 危险 {{\u003c admonition danger \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}Alias: error Bug {{\u003c admonition bug \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}} 示例 {{\u003c admonition example \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}} 引用 {{\u003c admonition quote \u003e}} The quick brown fox jumps over the lazy dog. {{\u003c /admonition \u003e}}Alias: cite ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/admonition/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - admonition","uri":"/zh-cn/documentation/content-management/shortcodes/extended/admonition/"},{"categories":["Documentation"],"content":"mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/mermaid/","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - mermaid","uri":"/zh-cn/documentation/content-management/shortcodes/extended/mermaid/"},{"categories":["Documentation"],"content":" mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能。 Mermaid 是一个可以帮助你在文章中绘制图表和流程图的库，类似 Markdown 的语法。 只需将你的 mermaid 代码插入 mermaid shortcode 中即可。 流程图 一个 流程图 mermaid 示例： {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下： graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] 时序图 一个 时序图 mermaid 示例： {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下： sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! 类图 一个 类图 mermaid 示例： {{\u003c mermaid \u003e}} classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } {{\u003c /mermaid \u003e}} 呈现的输出效果如下： classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } 状态图 一个 状态图 mermaid 示例： {{\u003c mermaid \u003e}} stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下： stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] 实体关系图 一个 实体关系图 mermaid 示例： {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} 呈现的输出效果如下： erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 用户体验旅程图 一个 用户体验旅程图 mermaid 示例： {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} 呈现的输出效果如下： journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me 甘特图 一个 甘特图 mermaid 示例： {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u003c /mermaid \u003e}} 呈现的输","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/mermaid/:0:0","tags":["Shortcodes","Content"],"title":"扩展 Shortcode - mermaid","uri":"/zh-cn/documentation/content-management/shortcodes/extended/mermaid/"},{"categories":["Documentation"],"content":"FixIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 Shortcodes。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/introduction/","tags":["Shortcodes","Content","Advanced"],"title":"扩展 Shortcodes 概述","uri":"/zh-cn/documentation/content-management/shortcodes/extended/introduction/"},{"categories":["Documentation"],"content":"FixIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 Shortcodes。 FixIt 主题内置 根据需要使用这些 FixIt 主题扩展的 Shortcodes。 技巧 要覆盖 FixIt 主题扩展的 Shortcodes，请将 源代码 复制到 layouts/shortcodes 目录中同名的文件中。 Style 注意 Hugo extended 版本对于 style shortcode 是必需的。 style shortcode 用来在你的文章中插入自定义样式。 style shortcode 有两个位置参数。 第一个参数是自定义样式的内容。它支持  SASS 中的嵌套语法， 并且 \u0026 指代这个父元素。 第二个参数是包裹你要更改样式的内容的 HTML 标签，默认值是 div。 一个 style 示例： {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下： This is a right-aligned paragraph. Link link shortcode 是 Markdown 链接语法 的替代。 link shortcode 可以提供一些其它的功能并且可以在代码块中使用。 支持 本地资源引用 的完整用法。 link shortcode 有以下命名参数： href [必需]（第一个位置参数） 链接的目标。 content [可选]（第二个位置参数） 链接的内容，默认值是 href 参数的值。 支持 Markdown 或者 HTML 格式。 title [可选]（第三个位置参数） HTML a 标签 的 title 属性，当悬停在链接上会显示的提示。 card [可选]（第四个位置参数） 是否显示为卡片式链接，默认值 false。 card-icon [可选] (第五个位置参数) 卡片式链接的图标，支持图片链接和 Font Awesome 图标。如果未指定，则尝试从链接中获取 favicon。 download [可选] HTML a 标签 的 download 属性。 class [可选] HTML a 标签 的 class 属性。 rel [可选] HTML a 标签 的 rel 补充属性。 external-icon [可选] 是否自动显示外链图标。 noreferrer [可选] rel 属性是否添加 noreferrer, 默认：true。 一个 link 示例： {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下： https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例： {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下（将鼠标悬停在链接上，会有一行提示）: Upstage 一个卡片式 link 示例： {{\u003c link \"https://github.com/hugo-fixit/FixIt\" \"FixIt Theme\" \"source of FixIt Theme\" true \u003e}} {{\u003c link \"https://lruihao.cn\" \"Lruihao Blog\" \"Lruihao Blog\" true \"https://lruihao.cn/images/avatar.jpg\" \u003e}} {{\u003c link \"https://lruihao.cn\" \"Lruihao Blog\" \"Lruihao Blog\" true \"fa-solid fa-blog\" \u003e}} 呈现的输出效果如下： FixIt Theme https://github.com/hugo-fixit/FixIt Lruihao Blog https://lruihao.cn Lruihao Blog https://lruihao.cn 一个可下载的 link 示例： {{\u003c link href=\"/music/Wavelength.mp3\" content=\"Wavelength.mp3\" title=\"Download Wavelength.mp3\" download=\"Wavelength.mp3\" \u003e}} {{\u003c link href=\"/music/Wavelength.mp3\" content=\"Wavelength.mp3\" title=\"Download Wavelength.mp3\" download=\"Wavelength.mp3\" card=true \u003e}} 呈现的输出效果如下： Wavelength.mp3 Wavelength.mp3 /music/Wavelength.mp3 Image image shortcode 是 [figure shortcode][figure] 的替代。image shortcode 可以充分利用 lightgallery。 支持 本地资源引用 的完整用法。 image shortcode 有以下命名参数： src [必需]（第一个位置参数） 图片的 URL。 alt [可选]（第二个位置参数） 图片无法显示时的替代文本，默认值是 src 参数的值。 支持 Markdown 或者 HTML 格式。 caption [可选]（第三个位置参数） 图片标题。 支持 Markdown 或者 HTML 格式。 title [可选] 当悬停在图片上会显示的提示。 class [可选] HTML figure 标签的 class 属性。 height [可选] 图片的 height 属性。 width [可选] 图片的 width 属性。 linked [可选] 图片是否需要被链接，默认值是 true。 rel [可选] HTML a 标签 的 rel 补充属性，仅在 linked 属性设置成 true 时有效。 loading [可选] HTML a 标签 的 loading 补充属性，可选值：eager、lazy，默认值是 lazy。 optimise [可选] 图片是否需要被优化，覆盖全局配置。 cacheRemote [可选] 是否缓存远程图片，覆盖全局配置。 一个 image 示例： {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" \u003e}} 呈现的输出效果如下： Lighthouse (image) Admonition admonition shortcode 允许你在内容中添加各种类型的标注。 完整文档请查看页面 扩展 Shortcode - admonition。 Mermaid mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能。 完整文档请查看页面 扩展 Shortcode - mermaid。 Echarts echarts shortcode 使用 ECharts 库提供数据可视化的功能。 完整文档请查看页面 扩展 Shortcode - echarts。 Mapbox mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能。 完整文档请查看页面 扩展 Shortcode - mapbox。 Music music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器。 完整文档请查看页面 扩展 Shortcode - music。 Spotify spotify shortcode 提供了一个内嵌的用来播放 Spotify 音乐的响应式播放器。 完整文档请查看页面 扩展 Shortcode - spotify。 Bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器。 完整文档请查看页面 扩展 Shortcode - bilibili。 Douyin douyin shortcode 提供了一个内嵌的用来播放抖音视频的响应式播放器。 完整文档请查看页面 扩展 Shortcode - douyin。 Typeit typeit shortcode 基于 TypeIt 提供了打字动画。 完整文档请查看页面 扩展 Shortcode - typeit。 Script script shortcode 用来在你的文章中插入  ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/extended/introduction/:0:0","tags":["Shortcodes","Content","Advanced"],"title":"扩展 Shortcodes 概述","uri":"/zh-cn/documentation/content-management/shortcodes/extended/introduction/"},{"categories":["Documentation"],"content":"Shortcodes 是在内容文件中调用内置或自定义模板的简单片段。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/built-in/","tags":["Shortcodes","Content","Basics"],"title":"内置 Shortcodes","uri":"/zh-cn/documentation/content-management/shortcodes/built-in/"},{"categories":["Documentation"],"content":"Shortcodes 是在内容文件中调用内置或自定义模板的简单片段。 什么是 Shortcode Hugo 喜欢 Markdown，因为它的内容格式简单，但有时 Markdown 会有局限性。通常，内容作者被迫向 Markdown 内容中添加原始 HTML（例如，视频 \u003ciframe\u003e）。我们认为这与 Markdown 语法的美丽简洁相矛盾。 Hugo 为了避免这些限制创建了 shortcodes。 shortcode 是一个简单的片段，位于内容文件中，Hugo 将使用预定义的模板进行渲染。请注意，shortcode 在模板文件中不起作用。如果你需要模板中 shortcodes 提供的插入功能，你很可能需要一个 partial template。 除了更干净的 Markdown，shortcodes 可以随时更新以反映新的类、技术或标准。在站点生成时，Hugo shortcodes 将轻松合并你的更改。你避免了可能复杂的搜索和替换操作。 使用 Shortcodes 带有原始字体串格式的 Shortcodes ` ` 带有 Markdown 的 Shortcodes % % 不带有 Markdown 的 Shortcodes \u003c \u003e 在 Use Shortcodes 部分查看更多细节。 内置 Shortcodes 根据需要使用这些 Hugo 内置 Shortcodes。 技巧 要覆盖 Hugo 内置 Shortcodes，请将 源代码 复制到 layouts/shortcodes 目录中同名的文件中。 Figure figure shortcode 的文档。 一个 figure 示例： {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下： Lighthouse (figure) 输出的 HTML 看起来像这样： \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\" /\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e Highlight highlight shortcode 的文档。 一个 highlight 示例： {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下： \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e Instagram instagram shortcode 的文档。 一个 instagram 示例： {{\u003c instagram CxOWiQNP2MO \u003e}} 呈现的输出效果如下： View this post on Instagram Param param shortcode 的文档。 一个 param 示例： {{\u003c param description \u003e}} 呈现的输出效果如下： Shortcodes 是在内容文件中调用内置或自定义模板的简单片段。 Qr Documentation of qr shortcode. 使用自闭合语法将文本作为参数传递： {{\u003c qr text=\"https://lruihao.cn\" \u003e}} 或者将文本插入在开放和关闭标签之间： {{\u003c qr \u003e}} https://lruihao.cn {{\u003c /qr \u003e}} 以上两种方法都会生成这个图片： Ref ref shortcode 的文档。 调用此 shortcode 时始终使用 {{% %}} 符号。 一个 ref 示例： - [内置 Shortcodes]({{% ref \"/documentation/content-management/shortcodes/built-in\" %}}) - [扩展 Shortcodes]({{% ref \"/documentation/content-management/shortcodes/extended\" %}}) 呈现的输出效果如下： 内置 Shortcodes 扩展 Shortcodes 输出的 HTML 看起来像这样： \u003cul\u003e \u003cli\u003e\u003ca href=\"http://example.org/documentation/content-management/shortcodes/built-in\"\u003e内置 Shortcodes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://example.org/documentation/content-management/shortcodes/extended\"\u003e扩展 Shortcodes\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e Relref relref shortcode 的文档。 调用此 shortcode 时始终使用 {{% %}} 符号。 一个 relref 示例： - [内置 Shortcodes]({{% relref \"/documentation/content-management/shortcodes/built-in\" %}}) - [扩展 Shortcodes]({{% relref \"/documentation/content-management/shortcodes/extended\" %}}) 呈现的输出效果如下： 内置 Shortcodes 扩展 Shortcodes 输出的 HTML 看起来像这样： \u003cul\u003e \u003cli\u003e\u003ca href=\"/documentation/content-management/shortcodes/built-in\"\u003e内置 Shortcodes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/documentation/content-management/shortcodes/extended\"\u003e扩展 Shortcodes\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e X x shortcode 的文档。 一个 x 示例： {{\u003c x user=\"SanDiegoZoo\" id=\"1453110110599868418\" \u003e}} 呈现的输出效果如下： Vimeo vimeo shortcode 的文档。 一个 vimeo 示例： {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下： Youtube youtube shortcode 的文档。 一个 youtube 示例： {{\u003c youtube 0RKpf3rK57I \u003e}} 呈现的输出效果如下： 隐私配置 要了解如何配置你的 Hugo 网站以满足新的欧盟隐私法规，请参阅 隐私保护。 ","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/shortcodes/built-in/:0:0","tags":["Shortcodes","Content","Basics"],"title":"内置 Shortcodes","uri":"/zh-cn/documentation/content-management/shortcodes/built-in/"},{"categories":["Documentation"],"content":"这篇文章展示了 FixIt 风格的 Markdown 扩展语法。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/markdown-syntax/extended/","tags":["Markdown","Content","HTML","Advanced"],"title":"Markdown 扩展语法","uri":"/zh-cn/documentation/content-management/markdown-syntax/extended/"},{"categories":["Documentation"],"content":"这篇文章展示了 FixIt 风格的 MarkdownFixIt Flavored Markdown 扩展语法。 警示 警示（Alert）也被称为 Callout 或 Admonition，是用于强调关键信息的引用块。 基本语法 使用基本的 Markdown 语法，每个警示的第一行是一个警示指示符，由一个感叹号和警示类型组成，用中括号括起来。 Alert 基本语法与 GitHub、Obsidian 和 Typora 兼容。 以下是所有五种类型的示例： \u003e [!NOTE] \u003e 突出显示用户应考虑的信息，即使只是浏览也应考虑。 \u003e [!TIP] \u003e 可选信息，可帮助用户取得更大的成功。 \u003e [!IMPORTANT] \u003e 用户成功所需的关键信息。 \u003e [!WARNING] \u003e 由于存在潜在风险，需要用户立即关注的关键内容。 \u003e [!CAUTION] \u003e 操作的潜在负面后果。 呈现的输出效果如下： 注意 突出显示用户应考虑的信息，即使只是浏览也应考虑。 提示 可选信息，可帮助用户取得更大的成功。 重要 用户成功所需的关键信息。 警告 由于存在潜在风险，需要用户立即关注的关键内容。 小心 操作的潜在负面后果。 扩展语法 使用扩展 Markdown 语法，你可以选择包含警示符号或警示标题。警示符号是 + 或 - 之一。通常用于指示警示是否可以图形折叠。 Alert 扩展语法与 Obsidian 和 Fixit admonition shortcode 兼容。 提示 扩展语法与 GitHub 或 Typora 不兼容。如果包含警示符号或警示标题，这些应用程序会将 Markdown 渲染为引用块。 更改标题 默认警示标题是其类型标识符的标题大小写。你可以通过在类型标识符后添加文本来更改它： \u003e [!NOTE] FixIt \u003e 一个简洁、优雅且高效的 Hugo 主题。 FixIt 一个简洁、优雅且高效的 Hugo 主题。 你甚至可以省略正文来创建仅标题的警示： \u003e [!TIP] 仅标题的警示 仅标题的警示 可折叠警示 你可以通过在类型标识符后直接添加加号（+）或减号（-）来使警示可折叠。 \u003e [!WARNING]+ 辐射危害 \u003e 请勿在没有防护装备的情况下接近或操作。 \u003e [!QUESTION]- 警示可以折叠吗？ \u003e 是的！在可折叠警示中，内容在折叠时被隐藏。 辐射危害 请勿在没有防护装备的情况下接近或操作。 警示可以折叠吗？ 是的！在可折叠警示中，内容在折叠时被隐藏。 嵌套警示 你可以在多个级别中嵌套警示。 \u003e [!question] 警示可以嵌套吗？ \u003e \u003e [!todo] 可以！它们可以。 \u003e \u003e \u003e [!example] 你甚至可以使用多层嵌套。 警示可以嵌套吗？ 可以！它们可以。 你甚至可以使用多层嵌套。 支持的类型 Alert 扩展语法支持 13 种类型的 警示横幅，除非你 自定义 Admonition，否则任何不支持的类型都会默认为 note 类型。类型标识不区分大小写。 任务列表 要创建任务列表，请在每个列表项前添加一个短横线和空格，然后跟上 [ ]。 - [x] 这是一个已完成的任务。 - [ ] 这是一个未完成的任务。 呈现的输出效果如下： 这是一个已完成的任务。 这是一个未完成的任务。 你可以在括号内使用任何字符来标记任务为已完成或其他状态。 - [ ] 未完成 - [x] 已完成 - [/] 进行中 - [-] 已取消 - [\u003c] 已计划 - [\u003e] 已重新计划 - [!] 重要 - [?] 问题 呈现的输出效果如下： 未完成 已完成 进行中 已取消 已计划 已重新计划 重要 问题 提示 如果你想要更多类型的任务列表，请查看 进阶篇 - 自定义任务列表 章节。 下划线 如何开启 Hugo 扩展语法 下划线、标记文本、下标 和 上标 语法默认关闭，需更新 Hugo 版本到 0.128.0 以上且开启以下的配置： [markup] [markup.goldmark] [markup.goldmark.extensions] strikethrough = false # https://gohugo.io/getting-started/configuration-markup/#extras [markup.goldmark.extensions.extras] [markup.goldmark.extensions.extras.delete] enable = true [markup.goldmark.extensions.extras.insert] enable = true [markup.goldmark.extensions.extras.mark] enable = true [markup.goldmark.extensions.extras.subscript] enable = true [markup.goldmark.extensions.extras.superscript] enable = true Hugo 支持一种 下划线 Markdown 扩展语法： FixIt 主题的作者是 ++Lruihao++。 呈现的输出效果如下： FixIt 主题的作者是 Lruihao。 标记文本 Hugo 支持一种 标记文本 Markdown 扩展语法： ==FixIt== 是一个很棒的 Hugo 主题！ 呈现的输出效果如下： FixIt 是一个很棒的 Hugo 主题！ 扩展的标记文本语法支持6种类型的标记文本。 警告 这是标记文本的实验性语法高亮。 ==Primary==[primary] ==Secondary==[secondary] ==Success==[success] ==Info==[info] ==Warning==[warning] ==Danger==[danger] 呈现的输出效果如下： Primary Secondary Success Info Warning Danger 除非你自定义标记文本，否则任何不支持的类型都会默认为 default 类型。 ==这是一个带有粉色的自定义类型。==[pink] 在你的项目目录 assets/css/_custom.scss 中添加以下 CSS 来自定义标记文本： .mark-pink { --fi-mark-background-color: pink; } 呈现的输出效果如下： 这是一个带有粉色的自定义类型。 输出的 HTML 看起来像这样： \u003cmark class=\"mark-pink\"\u003e这是一个带有粉色的自定义类型。\u003c/mark\u003e 下标 Hugo 支持一种 下标 Markdown 扩展语法： 水的化学式是 H~2~O。 呈现的输出效果如下： 水的化学式是 H2O。 上标 Hugo 支持一种 上标 Markdown 扩展语法： 2^10^ 等于 1024。 呈现的输出效果如下： 210 等于 1024。 Emoji 支持 这部分内容在 [Emoji 支持页面][emoji-support] 中介绍。 数学公式 FixIt 基于 $\\KaTeX$ 提供数学公式的支持。 在你的 主题配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的 Front matter 中设置属性 math: true来启用数学公式的自动渲染。 技巧 有一份 $\\KaTeX$ 中支持的 $\\TeX$ 函数 清单。 关于转义字符相关的注意事项 由于 Hugo 在渲染 Markdown 文档时会根据 _、*、^、\u003e\u003e 之类的语法生成 HTML 文档， 并且有些转义字符形式的文本内容 (如 \\(、\\)、\\[、\\]、\\\\) 会自动进行转义处理， 因此需要对这些地方进行额外的转义字符表达来实现自动渲染： _ -\u003e \\_ * -\u003e \\* ^ -\u003e \\^ （如果你开启了上标语法） \u003e\u003e -\u003e \\\u003e\u003e \\( -\u003e \\\\( \\) -\u003e \\\\) \\[ -\u003e \\\\[ \\] -\u003e \\\\] \\\\ -\u003e \\\\\\\\ 如果你不想写这些转义字符，FixIt 主题支持 raw shortcode， 它可以帮助你编写原始数学公式内容。 一个 raw 示例： {{\u003c raw \u003e}}行内公式：\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} {{\u003c raw \u003e}} 公式块： \\[ a=b+c \\\\ d+e=f \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] {{\u003c /raw \u003e}} 呈现的输出效果如下： 行内公式：\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\) 公式块： \\[ a=b+c \\\\ d+e=f \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符有： $ ... $ \\( ... \\) (转义的：\\\\( ... \\\\)) 例如： $c = \\pm\\sqrt{a\\^2 + b\\^2}$ 和 \\\\(f(x)=\\int_{-\\infty}\\^{\\infty} \\ha","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/markdown-syntax/extended/:0:0","tags":["Markdown","Content","HTML","Advanced"],"title":"Markdown 扩展语法","uri":"/zh-cn/documentation/content-management/markdown-syntax/extended/"},{"categories":["Documentation"],"content":"了解如何在 FixIt 主题中快速，直观地创建和组织内容。","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/introduction/","tags":["Content","Basics"],"title":"内容管理概述","uri":"/zh-cn/documentation/content-management/introduction/"},{"categories":["Documentation"],"content":"了解如何在 FixIt 主题中快速，直观地创建和组织内容。 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议： 保持博客文章存放在 content/posts 目录，例如：content/posts/my-first-post.md 保持简单的静态页面存放在 content 目录，例如：content/about.md 使用 _index.md 翻译列表页面标题等，例如：content/posts/_index.md 本地资源组织 有三种方法来引用 图片 和 音乐 等本地资源： 使用 捆绑页面 (Page bundles) 中的 页面资源。 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源。 将本地资源放在 assets 目录中，默认路径是 /assets。 引用资源的文件路径是相对于 assets 目录的。 将本地资源放在 static 目录中，默认路径是 /static。 引用资源的文件路径是相对于 static 目录的。 引用的优先级符合以上的顺序。 封面图生成工具 CoverView apple-devices-preview 页面模板 一般情况，你不需要设置 type 或 layout 参数，因为 Hugo 和 FixIt 会帮你选择。但是一些特殊情况你需要明确指定模板。 其他目录的文章 有时候你可能需要把一些文章单独放在一个目录中，而不是 content/posts 目录。这时你需要在文章的 Front matter 中设置 type: posts 参数。 例如，把所有文档的文章放在 content/documentation 目录，这里面的文章都使用 posts 模板： --- title: 内容管理概述 date: 2024-04-06T12:57:26+08:00 type: posts --- 提示 你可以在 content/documentation/_index.md 中设置 cascade.params.type 参数为 posts，这样 content/documentation 目录下的所有文章都会使用 posts 模板。 --- title: 主题文档 cascade: params: type: posts --- 友情链接 在 Front matter 中设置 layout: friends，并在 yourSite/data/ 目录下创建 friends.yml，其内容格式如下： # 朋友/站点信息例子 - nickname: 朋友名字 avatar: 朋友头像 url: 站点链接 description: 对朋友或其站点的说明 技巧 你可以使用以下命令快速创建友情链接页面： hugo new content friends/index.md 搜索结果 详见 [CSE 支持][cse-support]。 项目页面 这是一个额外的主题组件，具体请查看 hugo-fixit/component-projects。 Front Matter Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的 Front matter，详见 Front matter。 注意 不是所有的以下 Front matter 都必须在你的每篇文章中设置。 只有在文章的参数和你的 主题配置 中的 page 部分不一致时才有必要这么做。 技巧 FixIt 主题内嵌了一些 原型 (Archetype)，使用以下命令创建新内容时会自动带入常用的 Front matter： hugo new posts/foo.md # 或 hugo new --kind post-bundle posts/bar/ title: 文章标题 subtitle: 文章副标题 date: 这篇文章创建的日期时间它通常是从文章的 Front matter 中的 date 字段获取的，但是也可以在 主题配置 中设置 lastmod: 上次修改内容的日期时间 draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数，这篇文章不会被渲染 author: 文章作者配置，和 主题配置 中的 params.author 部分相同 author: name: \"\" # 文章作者 link: \"\" # 文章作者的链接 email: \"\" # 文章作者的邮箱，用于设置 Gravatar 头像，优先于 `author.avatar` avatar: \"\" # 文章作者的头像 authorAvatar: 是否启用文章作者头像 description: 文章内容的描述 keywords: 文章内容的关键词 license: 这篇文章特殊的许可 images: 页面图片，用于 Open Graph 和 Twitter Cards summary: 文章的摘要 summaryPlainify: 是否显示纯文本摘要，默认：false。和 主题配置 中的 params.summaryPlainify 相同 tags: 文章的标签 categories: 文章所属的类别 featuredImage: 文章的特色图片 featuredImagePreview: 用在主页预览的文章特色图片 hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上 hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中 hiddenFromRelated: 如果设为 true, 这篇文章将不会显示在相关文章中 hiddenFromFeed: 如果设为 true, 这篇文章将不会显示在 RSS、ATOM 和 JSON Feed 中 twemoji: 如果设为 true, 这篇文章会使用 twemoji lightgallery: 和 主题配置 中的 params.page.lightgallery 部分相同 ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法 fraction: 如果设为 true, 这篇文章会使用 分数扩展语法 fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法 linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接 linkToSource: 如果设为 true, 内容的页脚将显示指向源码的链接 linkToEdit: 如果设为 true, 内容的页脚将显示指向编辑页面的链接 linkToReport: 如果设为 true, 内容的页脚将显示指向报告问题的链接 linkToVscode: 如果设为 true, 内容的页脚将显示指向在 VSCode 中打开的链接 pageStyle: 页面样式，详见 页面宽度 toc: 和 主题配置 中的 params.page.toc 部分相同 expirationReminder: 和 主题配置 中的 params.page.expirationReminder 部分相同 heading: 和 主题配置 中的 params.page.heading 部分相同 code: 和 主题配置 中的 params.page.code 部分相同 math: 和 主题配置 中的 params.page.math 部分相同 mapbox: 和 主题配置 中的 params.page.mapbox 部分相同 share: 和 主题配置 中的 params.page.share 部分相同 comment: 和 主题配置 中的 params.page.comment 部分相同 library: 和 主题配置 中的 params.page.library 部分相同 seo: 和 主题配置 中的 params.page.seo 部分相同 type: 页面渲染模板，详见 页面模板 layout: 页面渲染模板，详见 页面模板 menu: 详见 添加内容到菜单 password: 加密页面内容的密码，详见 内容加密 message: 加密提示信息，详见 内容加密 repost: 和 主题配置 中的 params.page.repost 部分相同 autoBookmark: 和 主题配置 中的 params.page.autoBookmark 部分相同 wordCount: 和 主题配置 中的 params.page.wordCount 部分相同 readingTime: 和 主题配置 中的 params.page.readingTime 部分相同 endFlag: 和 主题配置 中的 params.page.endFlag 部分相同 reward: 和 主题配置 中的 params.page.reward 部分相同 instantPage: 和 主题配置 中的 params.page.instantPage 部分相同 feed: 和 主题配置 中的 params.feed 部分相同 titleIcon: 用于页面标题的图标，仅在 _index.md 中有效 featuredImage 和 featuredImagePreview 支持 本地资源引用 的完整用法。 如果带有在 Front matter 中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源， 没有必要再设置 featuredImage 或 f","date":"2023-02-24","objectID":"/zh-cn/documentation/content-management/introduction/:0:0","tags":["Content","Basics"],"title":"内容管理概述","uri":"/zh-cn/documentation/content-management/introduction/"},{"categories":["Guides","Documentation"],"content":"这篇文章展示了基本的 Markdown 语法和格式。","date":"2021-12-18","objectID":"/zh-cn/documentation/content-management/markdown-syntax/basics/","tags":["Markdown","Content","HTML","Basics"],"title":"Markdown 基本语法","uri":"/zh-cn/documentation/content-management/markdown-syntax/basics/"},{"categories":["Guides","Documentation"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例。 注意 这篇文章借鉴了一篇很棒的 来自 Grav 的文章。 如果你想了解 FixIt 主题的扩展 Markdown 语法，请阅读 扩展 Markdown 语法页面。 事实上，编写 Web 内容很麻烦。WYSIWYG所见即所得 编辑器帮助减轻了这一任务。但通常会导致代码太糟，或更糟糕的是，网页也会很丑。 没有通常伴随的所有复杂和丑陋的问题，Markdown 是一种更好的生成 HTML 内容的方式。 一些主要好处是： Markdown 简单易学，几乎没有多余的字符，因此编写内容也更快。 用 Markdown 书写时出错的机会更少。 可以产生有效的 XHTML 输出。 将内容和视觉显示保持分开，这样就不会打乱网站的外观。 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容。 Markdown 使用起来很有趣！ John Gruber, Markdown 的作者如是说： Markdown 格式的首要设计目标是更具可读性。 最初的想法是 Markdown 格式的文档应当以纯文本形式发布， 而不会看起来像被标签或格式说明所标记。 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响， 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式。 – John Gruber 话不多说，我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式！ 技巧  将此页保存为书签，以备将来参考！ 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样： \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中： ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样： \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释： 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的。 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签： ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下： 段落 按照纯文本的方式书写段落，纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹。 如下段落： Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样： \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行。 内联 HTML 元素 如果你需要某个 HTML 标签（带有一个类）, 则可以简单地像这样使用： Markdown 格式的段落。 \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落。 强调 加粗 用于强调带有较粗字体的文本片段。 以下文本片段会被 渲染为粗体。 **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样： \u003cstrong\u003e渲染为粗体\u003c/strong\u003e 斜体 用于强调带有斜体的文本片段。 以下文本片段被 渲染为斜体。 *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样： \u003cem\u003e渲染为斜体\u003c/em\u003e 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线。 ~~这段文本带有删除线。~~ 呈现的输出效果如下： 这段文本带有删除线。 输出的 HTML 看起来像这样： \u003cdel\u003e这段文本带有删除线。\u003c/del\u003e 组合 加粗，斜体，和删除线可以 组合使用。 _**加粗和斜体**_ ~~**删除线和加粗**~~ ~~_删除线和斜体_~~ ~~_**加粗，斜体和删除线**_~~ 呈现的输出效果如下： 加粗和斜体 删除线和加粗 删除线和斜体 加粗，斜体和删除线 输出的 HTML 看起来像这样： \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗，斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e 引用 用于在文档中引用其他来源的内容块。 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下： Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样： \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套： \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下： Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 列表 无序列表 一系列项的列表，其中项的顺序没有明显关系。 你可以使用以下任何符号来表示无序列表中的项： * 一项内容 - 一项内容 + 一项内容 例如： * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet portt","date":"2021-12-18","objectID":"/zh-cn/documentation/content-management/markdown-syntax/basics/:0:0","tags":["Markdown","Content","HTML","Basics"],"title":"Markdown 基本语法","uri":"/zh-cn/documentation/content-management/markdown-syntax/basics/"},{"categories":null,"content":"FixIt 主题的友链模板 Demo","date":"0001-01-01","objectID":"/zh-cn/showcase/","tags":null,"title":"案例展示网站推荐","uri":"/zh-cn/showcase/"},{"categories":null,"content":"最佳实践 hugo-fixit/docs Public template 📄 The open-source repo for fixit.lruihao.cn Markdown 70 18 Lruihao/hugo-blog Public template Lruihao's Note Markdown 82 9 添加你的 FixIt 网站 你可以通过 创建 PR 或 编辑数据 按 nickname 以字典顺序将你的 FixIt 网站添加到此页面，格式如下： - nickname: \u003cyour nickname\u003e avatar: \u003cyour avatar\u003e url: \u003cyour site link\u003e description: \u003cdescription of your site\u003e  网站失效、停止维护、不当内容都可能被取消链接！ ","date":"0001-01-01","objectID":"/zh-cn/showcase/:0:0","tags":null,"title":"案例展示网站推荐","uri":"/zh-cn/showcase/"}]